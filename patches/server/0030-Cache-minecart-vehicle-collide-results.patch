From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <wangxyper@163.com>
Date: Wed, 23 Aug 2023 14:21:16 -0400
Subject: [PATCH] Cache minecart vehicle collide results

Co-authored-by: MrHua269 <wangxyper@163.com>

Cache minecart vehicle collide results to prevent lag causing by massive stacked minecart

diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index faf449dfb4f95a300796db46833f3b6a51cb961b..67f93b1d915f709364125ae6db3e1148b31ae575 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -5,6 +5,8 @@ import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.datafixers.util.Pair;
+
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -342,6 +344,21 @@ public abstract class AbstractMinecart extends Entity {
         return this.flipped ? this.getDirection().getOpposite().getClockWise() : this.getDirection().getClockWise();
     }
 
+    // Leaf start - Cache minecart vehicle collide results
+    private List<Entity> lastCollideCache = new ArrayList<>();
+    private List<Entity> lastCollideCache2 = new ArrayList<>();
+
+    private void checkAndUpdateCache() {
+        if (this.getId() + this.tickCount % 10 == 0) {
+            if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
+                this.lastCollideCache = this.level().getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));
+            } else {
+                this.lastCollideCache2 = this.level().getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+            }
+        }
+    }
+    // Leaf end
+
     @Override
     public void tick() {
         // Purpur start
@@ -437,8 +454,9 @@ public abstract class AbstractMinecart extends Entity {
                 this.level().getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
             }
             // CraftBukkit end
+            this.checkAndUpdateCache(); // Leaf - Cache minecart vehicle collide results
             if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
-                List<Entity> list = this.level().getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));
+                List<Entity> list = this.lastCollideCache; // Leaf - Cache minecart vehicle collide results
 
                 if (!list.isEmpty()) {
                     Iterator iterator = list.iterator();
@@ -472,7 +490,7 @@ public abstract class AbstractMinecart extends Entity {
                     }
                 }
             } else {
-                Iterator iterator1 = this.level().getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D)).iterator();
+                Iterator iterator1 = this.lastCollideCache2.iterator(); // Leaf - Cache minecart vehicle collide results
 
                 while (iterator1.hasNext()) {
                     Entity entity1 = (Entity) iterator1.next();
